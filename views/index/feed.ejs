<%- include("../comum/barra.ejs") %>
     <div class="feed_page">
          <div class="feed">
               <div class="feed_box">
                    <div class="feed_box-header">
                         <img src="../../public/img/imagens/default-icon.jpg" alt="foto" class="icon" />
                         <h1 class="feed_box-title" id="userName"></h1>
                    </div>
                    <div class="feed_box-body">
                         <div class="feed_box-textarea">
                              <textarea name="post" id="post" cols="30" rows="10" value="" maxlength="350"
                                   placeholder="No que voc√™ est√° pensando?"></textarea>
                         </div>
                         <div class="imagem-preview">
                              <ul class="imagem-list">
                                   <li class="imagem-choosed" id="imagem-choosed"></li>
                              </ul>
                         </div>
                         <div class="feed_box-buttons">
                              <div class="feed_box-buttons--functions">
                                   <label class="feed-button" for="choose-image">üìÅ</label>
                                   <input type="file" id="choose-image" accept="image/png, image/jpeg, image/webp" />
                                   <button class="feed-button" id="emoji">Emoji</button>
                              </div>
                              <div class="feed_box-buttons--criar">
                                   <button class="feed-button" id="create-post">Criar post</button>
                              </div>
                         </div>
                    </div>
               </div>
               <div class="feed_body" id="feed-body">
               </div>
          </div>
     </div>
     <script>
          const userInfos = JSON.parse(localStorage.getItem('userInfos'));
          console.log(userInfos);

          const userName = document.getElementById('userName');
          userName.innerHTML = userInfos.User;

          const chooseImage = document.getElementById('choose-image');
          const imagemChoosed = document.getElementById('imagem-choosed');

          chooseImage.addEventListener('change', (e) => {
               const file = e.target.files[0];
               const reader = new FileReader();

               reader.onload = () => {
                    const img = document.createElement('img');
                    img.src = reader.result;
                    imagemChoosed.innerHTML = '';
                    imagemChoosed.appendChild(img);
               };

               reader.readAsDataURL(file);
          });

          const createPostButton = document.getElementById('create-post');

          createPostButton.addEventListener('click', async (e) => {
               const post = document.getElementById('post').value;
               const image = document.getElementById('choose-image').files[0];

               async function convertToBase64(image) {
                    return new Promise((resolve, reject) => {
                         const reader = new FileReader();
                         reader.onload = () => {
                              resolve(reader.result);
                         };
                         reader.onerror = reject;
                         reader.readAsDataURL(image);
                    });
               }

               const compressedBase64Image = await convertToBase64(image)
                    .then((result) => {
                         const img = new Image();
                         img.src = result;

                         const canvas = document.createElement('canvas');
                         const ctx = canvas.getContext('2d');
                         canvas.width = img.width;
                         canvas.height = img.height;
                         ctx.drawImage(img, 0, 0, img.width, img.height);

                         return canvas.toDataURL('image/webp', 0.8);
                    })
                    .catch((err) => {
                         console.log(err);
                    });

               const postContent = {
                    contentText: post,
                    contentImage: compressedBase64Image,
                    isImage: image ? 1 : 0,
                    userId: userInfos.Id_user,
               };

               fetch('http://localhost:3000/post/create', {
                    method: 'POST',
                    headers: {
                         'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(postContent),
               })
                    .then((response) => {
                         console.log(postContent);
                         console.log(response);
                         window.location.reload();
                    })
                    .catch((err) => {
                         console.log(postContent);
                         console.log(err);
                    });

          });


          const feedBody = document.querySelector('.feed_body');
          const renderizados = new Set();

          let page = 1;
          const postsPorPage = 10;
          let isCarregado = false;

          async function loadPosts() {
               isCarregado = true;
               const response = await fetch(`http://localhost:3000/post/getAllPosts?page=${page}&limit=${postsPorPage}`);
               const posts = await response.json();
               const feedBody = document.getElementById('feed-body');

               posts.forEach((post) => {
                    if (!renderizados.has(post.id)) {
                         renderizados.add(post.id);

                         const postElement = document.createElement('div');
                         postElement.classList.add('post');

                         postElement.innerHTML = `
                                       <div class="post_header">
                                        <div class="post_header-box">
                                             <img class="post_header-icon" src="../../public/img/imagens/default-icon.jpg">
                                             <h1 class="post_header-title">${post.userName}</h1>
                                             
                                        </div>
                                        <div class="post_header-boxData">
                                             <h2 class="post_header-data">${new Date(post.date).toLocaleDateString('pt-BR')}</h2>
                                             ${userInfos.Id_user === post.userId ? `<button class="post_Header-remove" onclick="removePost(${post.id})">üóëÔ∏è</button>` : `<button class="post_Header-remove disable" onclick="removePost(${post.id})">üóëÔ∏è</button>`}
                                        </div>
                                   </div>
                                   <div class="post_body">
                                        <p class="post_text">${post.contentText}</p>
                                        ${post.isImage == 1 && post.contentImage != null ? `<div class="post_image"><img src="${post.contentImage}"></div>` : ''}
                                   </div>
                                   <div class="post_footer">
                                        <span class="post_footer-likesCount">${post.likes}</span>
                                        <button class="post_footer-like" onclick="likePost(${post.id})" ${localStorage.getItem('likedPosts') && JSON.parse(localStorage.getItem('likedPosts')).includes(post.id) ? 'disabled' : ''}>‚ù§Ô∏è</button>
                                   </div>
                         `;

                         feedBody.appendChild(postElement);
                    }
               });

               isCarregado = false;
          }

          function checkScroll() {
               const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
               if (scrollTop + clientHeight >= scrollHeight - 5 && !isCarregado) {
                    page++;
                    loadPosts();
               }
          }

          window.addEventListener('scroll', checkScroll);
          window.addEventListener('load', loadPosts);


          function likePost(postId) {
               const hasLiked = localStorage.getItem('likedPosts') ? JSON.parse(localStorage.getItem('likedPosts')) : [];

               if (hasLiked.includes(postId)) {
                    return;
               }

               hasLiked.push(postId);
               localStorage.setItem('likedPosts', JSON.stringify(hasLiked));

               fetch('http://localhost:3000/post/like', {
                    method: 'POST',
                    headers: {
                         'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId }),
               })
                    .then((response) => {
                         console.log(response);
                         window.location.reload();
                    })
                    .catch((err) => {
                         console.log(err);
                    });
          }

          function removePost(postId) {
               fetch(`http://localhost:3000/post/delete/?postId=${postId}&userId=${userInfos.Id_user}`, {
                    method: 'DELETE',
                    headers: {
                         'Content-Type': 'application/json',
                    },
               })
                    .then((response) => {
                         console.log(response);
                         window.location.reload();
                    })
                    .catch((err) => {
                         console.log(err);
                    });
          }


     </script>